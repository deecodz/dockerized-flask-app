name: Create Tag

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  create-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Branch Name and Default Branch
        id: get_branch
        run: |
          # Extract branch name
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "::set-output name=branch_name::${BRANCH_NAME}"

          # Extract the default branch name
          DEFAULT_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
          echo "DEFAULT_BRANCH=${DEFAULT_BRANCH}" >> $GITHUB_ENV
          echo "::set-output name=default_branch::${DEFAULT_BRANCH}"

      - name: Generate Custom Tag
        id: generate_tag
        run: |
          YEAR=$(date +%Y)
          MONTH=$(date +%m)
          DAY=$(date +%d)
          
          # Pattern to search for tags from the current day
          LATEST_TAG=$(git tag -l "${YEAR}.${MONTH}.${DAY}.*" | sort -V | tail -n 1)
          
          # If no tag was found for today, start with 001, otherwise increment the last tag's number
          if [ -z "$LATEST_TAG" ]; then
            BUILD_NUMBER="001"
            echo "No tags found for today. Starting with 001."
          else
            LAST_BUILD_NUMBER=$(echo $LATEST_TAG | awk -F. '{print $4}')
            BUILD_NUMBER=$(printf "%03d" $((10#$LAST_BUILD_NUMBER + 1)))
            echo "Incrementing the last build number: $BUILD_NUMBER"
          fi
          
          # Construct the release version
          RELEASE_VERSION="${YEAR}.${MONTH}.${DAY}.${BUILD_NUMBER}"
          
          # Check if current branch is the default branch
          if [ "${BRANCH_NAME}" != "${DEFAULT_BRANCH}" ]; then
            RELEASE_VERSION="${RELEASE_VERSION}.${BRANCH_NAME}"
          fi

          echo "Generated Release Version: $RELEASE_VERSION"
          
          # Set the release version to be used in other steps
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "::set-output name=release_version::${RELEASE_VERSION}"

      - name: Create and Push Tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.generate_tag.outputs.release_version }}
          git push origin ${{ steps.generate_tag.outputs.release_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
