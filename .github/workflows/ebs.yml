on:
  workflow_dispatch:
    inputs:
      instance_profile_name:
        description: 'Instance Profile Name'
        required: true
        default: 'test-instance-profile'
      app_name:
        description: 'Elastic Beanstalk Application Name'
        required: true
        default: 'my-app'
      env_name:
        description: 'Elastic Beanstalk Environment Name'
        required: true
        default: 'my-env-newer'
      vpc_id:
        description: 'VPC ID'
        required: true
        default: 'vpc-08be2d942d24fc036'
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      security_group_name:
        description: 'Name for the new Security Group'
        required: true
        default: 'eb-sg'

jobs:
  provision-eb-instance:
    runs-on: ubuntu-latest

    steps:
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli jq

      - name: Set up AWS credentials
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region ${{ github.event.inputs.aws_region }}

      - name: Create instance profile and associate role
        run: |
          aws iam get-instance-profile --instance-profile-name ${{ github.event.inputs.instance_profile_name }} \
          || (aws iam create-instance-profile --instance-profile-name ${{ github.event.inputs.instance_profile_name }} &&
          aws iam add-role-to-instance-profile --role-name test-role --instance-profile-name ${{ github.event.inputs.instance_profile_name }})

      - name: Create Elastic Beanstalk Application
        run: | 
          aws elasticbeanstalk describe-applications --application-name ${{ github.event.inputs.app_name }} \
          || aws elasticbeanstalk create-application --application-name ${{ github.event.inputs.app_name }} --description "My application for Elastic Beanstalk"

      - name: Create new Security Group
        run: |
          SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name ${{ github.event.inputs.security_group_name }} --description "Security group for Elastic Beanstalk" --vpc-id ${{ github.event.inputs.vpc_id }} | jq -r '.GroupId')
          echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> $GITHUB_ENV

      - name: Provision Elastic Beanstalk instance
        run: |
          aws elasticbeanstalk create-environment \
            --application-name ${{ github.event.inputs.app_name }} \
            --environment-name ${{ github.event.inputs.env_name }} \
            --option-settings Namespace=aws:autoscaling:launchconfiguration,OptionName=IamInstanceProfile,Value=${{ github.event.inputs.instance_profile_name }} \
            Namespace=aws:autoscaling:launchconfiguration,OptionName=EC2KeyName,Value=testkey \
            --region ${{ github.event.inputs.aws_region }} \
            --tier Type=Standard,Name=WebServer \
            --solution-stack-name "64bit Amazon Linux 2023 v4.0.3 running Python 3.9"
