name: Release Version Tagging

on:
  push:
    branches:
      - '*'

# Add permissions block at the top level of the workflow
permissions:
  contents: write

jobs:
  create-release-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

      - name: Get latest release version for today
        id: get_latest_version
        run: |
          latest_version=$(git tag -l "${{ steps.date.outputs.date }}.*" | sort -V | tail -n 1)
          if [ -z "$latest_version" ]; then
            echo "build_number=001" >> $GITHUB_OUTPUT
          else
            current_build=$(echo $latest_version | awk -F. '{print $4}')
            next_build=$(printf "%03d" $((10#$current_build + 1)))
            echo "build_number=$next_build" >> $GITHUB_OUTPUT
          fi

      - name: Set release version
        id: set_release_version
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "release_version=${{ steps.date.outputs.date }}.${{ steps.get_latest_version.outputs.build_number }}" >> $GITHUB_OUTPUT
          else
            echo "release_version=${{ steps.date.outputs.date }}.${{ steps.get_latest_version.outputs.build_number }}-rc.${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

      - name: Create and push release version
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.set_release_version.outputs.release_version }}
          git push origin ${{ steps.set_release_version.outputs.release_version }}

# name: Deploy Environment

# on:
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Deployment Environment'
#         required: true
#         default: 'Test'

# jobs:
#   setup-environment:
#     runs-on: ubuntu-latest
#     environment: ${{ inputs.environment }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
      
#       # - name: Set Environment Specific Variables
#       #   shell: bash
#       #   run: |
#       #     # Trim whitespace and log the input environment
#       #     environment="$(echo '${{ inputs.environment }}' | xargs)"
#       #     echo "Received environment: '$environment'"
          
#       #     if [[ "$environment" == *Production ]]; then
#       #       echo "Using Production settings"
#       #       echo "CPU=320" >> $GITHUB_ENV
#       #       echo "MEMORY=640" >> $GITHUB_ENV
#       #       echo "MEMORY_RESERVATION=640" >> $GITHUB_ENV
#       #     else
#       #       echo "Using Non-Production settings"
#       #       echo "CPU=150" >> $GITHUB_ENV
#       #       echo "MEMORY=256" >> $GITHUB_ENV
#       #       echo "MEMORY_RESERVATION=174" >> $GITHUB_ENV
#       #     fi

#       - name: Determine Image URL
#         id: setup_image_url
#         run: |
#           if [[ "${{ inputs.environment }}" != *Production ]]; then
#             echo "Using image URL from push_to_ecr output"
#             IMAGE_URL="${{ needs.push_to_ecr.outputs.image_url }}"
#           elif [ -n "${{ inputs.image_url }}" ]; then
#             echo "Using manually provided image URL for production"
#             IMAGE_URL="${{ inputs.image_url }}"
#           else
#             echo "::error ::Image URL must be provided for production environment"
#             exit 1
#           fi
#           echo "IMAGE_URL=${IMAGE_URL}" >> $GITHUB_ENV
